// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XDOHISTSTRETCH_H
#define XDOHISTSTRETCH_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdohiststretch_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Crtl_bus_BaseAddress;
} XDohiststretch_Config;
#endif

typedef struct {
    u32 Crtl_bus_BaseAddress;
    u32 IsReady;
} XDohiststretch;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDohiststretch_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDohiststretch_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDohiststretch_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDohiststretch_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDohiststretch_Initialize(XDohiststretch *InstancePtr, u16 DeviceId);
XDohiststretch_Config* XDohiststretch_LookupConfig(u16 DeviceId);
int XDohiststretch_CfgInitialize(XDohiststretch *InstancePtr, XDohiststretch_Config *ConfigPtr);
#else
int XDohiststretch_Initialize(XDohiststretch *InstancePtr, const char* InstanceName);
int XDohiststretch_Release(XDohiststretch *InstancePtr);
#endif

void XDohiststretch_Start(XDohiststretch *InstancePtr);
u32 XDohiststretch_IsDone(XDohiststretch *InstancePtr);
u32 XDohiststretch_IsIdle(XDohiststretch *InstancePtr);
u32 XDohiststretch_IsReady(XDohiststretch *InstancePtr);
void XDohiststretch_EnableAutoRestart(XDohiststretch *InstancePtr);
void XDohiststretch_DisableAutoRestart(XDohiststretch *InstancePtr);

void XDohiststretch_Set_xMin(XDohiststretch *InstancePtr, u32 Data);
u32 XDohiststretch_Get_xMin(XDohiststretch *InstancePtr);
void XDohiststretch_Set_xMax(XDohiststretch *InstancePtr, u32 Data);
u32 XDohiststretch_Get_xMax(XDohiststretch *InstancePtr);

void XDohiststretch_InterruptGlobalEnable(XDohiststretch *InstancePtr);
void XDohiststretch_InterruptGlobalDisable(XDohiststretch *InstancePtr);
void XDohiststretch_InterruptEnable(XDohiststretch *InstancePtr, u32 Mask);
void XDohiststretch_InterruptDisable(XDohiststretch *InstancePtr, u32 Mask);
void XDohiststretch_InterruptClear(XDohiststretch *InstancePtr, u32 Mask);
u32 XDohiststretch_InterruptGetEnabled(XDohiststretch *InstancePtr);
u32 XDohiststretch_InterruptGetStatus(XDohiststretch *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
