// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doHist,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.220000,HLS_SYN_LAT=153858,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module doHist (
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        histo_Addr_A,
        histo_EN_A,
        histo_WEN_A,
        histo_Din_A,
        histo_Dout_A,
        histo_Clk_A,
        histo_Rst_A,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_DATA_WIDTH = 32;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv17_0 = 17'b00000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv17_12C00 = 17'b10010110000000000;
parameter    ap_const_lv17_1 = 17'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
input   ap_clk;
input   ap_rst_n;
input  [7:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [0:0] inStream_TKEEP;
input  [0:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] histo_Addr_A;
output   histo_EN_A;
output  [3:0] histo_WEN_A;
output  [31:0] histo_Din_A;
input  [31:0] histo_Dout_A;
output   histo_Clk_A;
output   histo_Rst_A;
output   interrupt;

reg inStream_TREADY;
reg histo_EN_A;
reg[3:0] histo_WEN_A;
reg[31:0] histo_Din_A;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [1:0] ap_CS_fsm = 2'b00;
reg    ap_ready;
wire    doHist_CRTL_BUS_s_axi_U_ap_dummy_ce;
wire   [8:0] idxHist_1_fu_136_p2;
wire   [16:0] idxPixel_1_fu_153_p2;
reg   [16:0] idxPixel_1_reg_186;
wire   [0:0] exitcond_fu_147_p2;
reg    ap_sig_bdd_86;
reg   [7:0] histo_addr_1_reg_191;
reg   [8:0] idxHist_reg_107;
wire   [0:0] exitcond2_fu_130_p2;
reg   [16:0] idxPixel_reg_118;
wire   [63:0] tmp_fu_142_p1;
wire   [63:0] tmp_3_fu_163_p1;
reg   [31:0] histo_Addr_A_orig;
wire   [31:0] tmp_4_fu_168_p2;
reg   [1:0] ap_NS_fsm;


doHist_CRTL_BUS_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doHist_CRTL_BUS_s_axi_U(
    .AWVALID( s_axi_CRTL_BUS_AWVALID ),
    .AWREADY( s_axi_CRTL_BUS_AWREADY ),
    .AWADDR( s_axi_CRTL_BUS_AWADDR ),
    .WVALID( s_axi_CRTL_BUS_WVALID ),
    .WREADY( s_axi_CRTL_BUS_WREADY ),
    .WDATA( s_axi_CRTL_BUS_WDATA ),
    .WSTRB( s_axi_CRTL_BUS_WSTRB ),
    .ARVALID( s_axi_CRTL_BUS_ARVALID ),
    .ARREADY( s_axi_CRTL_BUS_ARREADY ),
    .ARADDR( s_axi_CRTL_BUS_ARADDR ),
    .RVALID( s_axi_CRTL_BUS_RVALID ),
    .RREADY( s_axi_CRTL_BUS_RREADY ),
    .RDATA( s_axi_CRTL_BUS_RDATA ),
    .RRESP( s_axi_CRTL_BUS_RRESP ),
    .BVALID( s_axi_CRTL_BUS_BVALID ),
    .BREADY( s_axi_CRTL_BUS_BREADY ),
    .BRESP( s_axi_CRTL_BUS_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ACLK_EN( doHist_CRTL_BUS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_130_p2))) begin
        idxHist_reg_107 <= idxHist_1_fu_136_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        idxHist_reg_107 <= ap_const_lv9_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond2_fu_130_p2))) begin
        idxPixel_reg_118 <= ap_const_lv17_0;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        idxPixel_reg_118 <= idxPixel_1_reg_186;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond_fu_147_p2 == ap_const_lv1_0) & ~ap_sig_bdd_86)) begin
        histo_addr_1_reg_191 <= tmp_3_fu_163_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_86)) begin
        idxPixel_1_reg_186 <= idxPixel_1_fu_153_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or exitcond_fu_147_p2 or ap_sig_bdd_86)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_86 & ~(exitcond_fu_147_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond_fu_147_p2 or ap_sig_bdd_86)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_86 & ~(exitcond_fu_147_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// histo_Addr_A_orig assign process. ///
always @ (ap_CS_fsm or histo_addr_1_reg_191 or tmp_fu_142_p1 or tmp_3_fu_163_p1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        histo_Addr_A_orig = histo_addr_1_reg_191;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        histo_Addr_A_orig = tmp_fu_142_p1;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        histo_Addr_A_orig = tmp_3_fu_163_p1;
    end else begin
        histo_Addr_A_orig = 'bx;
    end
end

/// histo_Din_A assign process. ///
always @ (ap_CS_fsm or tmp_4_fu_168_p2)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        histo_Din_A = tmp_4_fu_168_p2;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        histo_Din_A = ap_const_lv32_0;
    end else begin
        histo_Din_A = 'bx;
    end
end

/// histo_EN_A assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_86)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_86) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        histo_EN_A = ap_const_logic_1;
    end else begin
        histo_EN_A = ap_const_logic_0;
    end
end

/// histo_WEN_A assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_130_p2)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_130_p2)) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        histo_WEN_A = ap_const_lv4_F;
    end else begin
        histo_WEN_A = ap_const_lv4_0;
    end
end

/// inStream_TREADY assign process. ///
always @ (ap_CS_fsm or exitcond_fu_147_p2 or ap_sig_bdd_86)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond_fu_147_p2 == ap_const_lv1_0) & ~ap_sig_bdd_86)) begin
        inStream_TREADY = ap_const_logic_1;
    end else begin
        inStream_TREADY = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_147_p2 or ap_sig_bdd_86 or exitcond2_fu_130_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond2_fu_130_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((~ap_sig_bdd_86 & ~(exitcond_fu_147_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_147_p2 == ap_const_lv1_0) & ~ap_sig_bdd_86)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_86 assign process. ///
always @ (inStream_TVALID or exitcond_fu_147_p2)
begin
    ap_sig_bdd_86 = ((inStream_TVALID == ap_const_logic_0) & (exitcond_fu_147_p2 == ap_const_lv1_0));
end
assign doHist_CRTL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign exitcond2_fu_130_p2 = (idxHist_reg_107 == ap_const_lv9_100? 1'b1: 1'b0);
assign exitcond_fu_147_p2 = (idxPixel_reg_118 == ap_const_lv17_12C00? 1'b1: 1'b0);
assign histo_Addr_A = histo_Addr_A_orig << ap_const_lv32_2;
assign histo_Clk_A = ap_clk;
assign histo_Rst_A = ap_rst_n;
assign idxHist_1_fu_136_p2 = (idxHist_reg_107 + ap_const_lv9_1);
assign idxPixel_1_fu_153_p2 = (idxPixel_reg_118 + ap_const_lv17_1);
assign tmp_3_fu_163_p1 = $unsigned(inStream_TDATA);
assign tmp_4_fu_168_p2 = (histo_Dout_A + ap_const_lv32_1);
assign tmp_fu_142_p1 = $unsigned(idxHist_reg_107);


endmodule //doHist

