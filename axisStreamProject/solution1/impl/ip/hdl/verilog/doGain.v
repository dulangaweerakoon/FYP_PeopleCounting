// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doGain,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=1006,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module doGain (
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_pp0_stg0_fsm_1 = 2'b1;
parameter    ap_ST_st8_fsm_2 = 2'b10;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_DATA_WIDTH = 32;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv10_3E8 = 10'b1111101000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
output   interrupt;

reg inStream_TREADY;
reg outStream_TVALID;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [1:0] ap_CS_fsm = 2'b00;
reg    ap_ready;
wire   [31:0] gain;
wire    doGain_CRTL_BUS_s_axi_U_ap_dummy_ce;
reg   [9:0] idx_reg_123;
wire   [0:0] exitcond_fu_135_p2;
reg   [0:0] exitcond_reg_186;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_91;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_186_pp0_it4;
reg    ap_sig_ioackin_outStream_TREADY;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_186_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_reg_186_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_reg_186_pp0_it3;
wire   [9:0] idx_1_fu_141_p2;
reg   [3:0] tmp_keep_V_reg_200;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4;
reg   [3:0] tmp_strb_V_reg_205;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4;
reg   [1:0] tmp_user_V_reg_210;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4;
reg   [0:0] tmp_last_V_reg_215;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4;
reg   [4:0] tmp_id_V_reg_220;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4;
reg   [5:0] tmp_dest_V_reg_225;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4;
wire   [31:0] grp_fu_175_p2;
reg    ap_reg_ioackin_outStream_TREADY = 1'b0;
wire   [31:0] grp_fu_175_p0;
wire   [31:0] grp_fu_175_p1;
reg    doGain_ap_rst;
reg    grp_fu_175_ce;
reg   [1:0] ap_NS_fsm;


doGain_CRTL_BUS_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doGain_CRTL_BUS_s_axi_U(
    .AWVALID( s_axi_CRTL_BUS_AWVALID ),
    .AWREADY( s_axi_CRTL_BUS_AWREADY ),
    .AWADDR( s_axi_CRTL_BUS_AWADDR ),
    .WVALID( s_axi_CRTL_BUS_WVALID ),
    .WREADY( s_axi_CRTL_BUS_WREADY ),
    .WDATA( s_axi_CRTL_BUS_WDATA ),
    .WSTRB( s_axi_CRTL_BUS_WSTRB ),
    .ARVALID( s_axi_CRTL_BUS_ARVALID ),
    .ARREADY( s_axi_CRTL_BUS_ARREADY ),
    .ARADDR( s_axi_CRTL_BUS_ARADDR ),
    .RVALID( s_axi_CRTL_BUS_RVALID ),
    .RREADY( s_axi_CRTL_BUS_RREADY ),
    .RDATA( s_axi_CRTL_BUS_RDATA ),
    .RRESP( s_axi_CRTL_BUS_RRESP ),
    .BVALID( s_axi_CRTL_BUS_BVALID ),
    .BREADY( s_axi_CRTL_BUS_BREADY ),
    .BRESP( s_axi_CRTL_BUS_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ACLK_EN( doGain_CRTL_BUS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .gain( gain )
);

doGain_mul_32s_32s_32_6 #(
    .ID( 0 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doGain_mul_32s_32s_32_6_U0(
    .clk( ap_clk ),
    .reset( doGain_ap_rst ),
    .din0( grp_fu_175_p0 ),
    .din1( grp_fu_175_p1 ),
    .ce( grp_fu_175_ce ),
    .dout( grp_fu_175_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_outStream_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_outStream_TREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
        end else if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) & (ap_const_logic_1 == outStream_TREADY))) begin
            ap_reg_ioackin_outStream_TREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_135_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_fu_135_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | ((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_135_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_135_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        idx_reg_123 <= idx_1_fu_141_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        idx_reg_123 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        ap_reg_ppstg_exitcond_reg_186_pp0_it1 <= exitcond_reg_186;
        ap_reg_ppstg_exitcond_reg_186_pp0_it2 <= ap_reg_ppstg_exitcond_reg_186_pp0_it1;
        ap_reg_ppstg_exitcond_reg_186_pp0_it3 <= ap_reg_ppstg_exitcond_reg_186_pp0_it2;
        ap_reg_ppstg_exitcond_reg_186_pp0_it4 <= ap_reg_ppstg_exitcond_reg_186_pp0_it3;
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1 <= tmp_dest_V_reg_225;
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2 <= ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1;
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3 <= ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2;
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4 <= ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3;
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1 <= tmp_id_V_reg_220;
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2 <= ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1;
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3 <= ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2;
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4 <= ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3;
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1 <= tmp_keep_V_reg_200;
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2 <= ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1;
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3 <= ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2;
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4 <= ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3;
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1 <= tmp_last_V_reg_215;
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2 <= ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1;
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3 <= ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2;
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4 <= ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3;
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1 <= tmp_strb_V_reg_205;
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2 <= ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1;
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3 <= ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2;
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4 <= ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3;
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1 <= tmp_user_V_reg_210;
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2 <= ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1;
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3 <= ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2;
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4 <= ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        exitcond_reg_186 <= exitcond_fu_135_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_135_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        tmp_dest_V_reg_225 <= inStream_TDEST;
        tmp_id_V_reg_220 <= inStream_TID;
        tmp_keep_V_reg_200 <= inStream_TKEEP;
        tmp_last_V_reg_215 <= inStream_TLAST;
        tmp_strb_V_reg_205 <= inStream_TSTRB;
        tmp_user_V_reg_210 <= inStream_TUSER;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st8_fsm_2 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st8_fsm_2 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_outStream_TREADY assign process. ///
always @ (outStream_TREADY or ap_reg_ioackin_outStream_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_outStream_TREADY)) begin
        ap_sig_ioackin_outStream_TREADY = outStream_TREADY;
    end else begin
        ap_sig_ioackin_outStream_TREADY = ap_const_logic_1;
    end
end

/// grp_fu_175_ce assign process. ///
always @ (ap_CS_fsm or exitcond_fu_135_p2 or exitcond_reg_186 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_91 or ap_reg_ppstg_exitcond_reg_186_pp0_it4 or ap_sig_ioackin_outStream_TREADY or ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_reg_186_pp0_it1 or ap_reg_ppstg_exitcond_reg_186_pp0_it2 or ap_reg_ppstg_exitcond_reg_186_pp0_it3)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ((exitcond_fu_135_p2 == ap_const_lv1_0) | (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) | (exitcond_reg_186 == ap_const_lv1_0) | (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it1) | (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it2) | (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it3)))) begin
        grp_fu_175_ce = ap_const_logic_1;
    end else begin
        grp_fu_175_ce = ap_const_logic_0;
    end
end

/// inStream_TREADY assign process. ///
always @ (ap_CS_fsm or exitcond_fu_135_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_91 or ap_reg_ppstg_exitcond_reg_186_pp0_it4 or ap_sig_ioackin_outStream_TREADY or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_135_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        inStream_TREADY = ap_const_logic_1;
    end else begin
        inStream_TREADY = ap_const_logic_0;
    end
end

/// outStream_TVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_91 or ap_reg_ppstg_exitcond_reg_186_pp0_it4 or ap_reg_ppiten_pp0_it5 or ap_reg_ioackin_outStream_TREADY)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) & (ap_const_logic_0 == ap_reg_ioackin_outStream_TREADY))) begin
        outStream_TVALID = ap_const_logic_1;
    end else begin
        outStream_TVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_135_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_91 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it4 or ap_reg_ppstg_exitcond_reg_186_pp0_it4 or ap_sig_ioackin_outStream_TREADY or ap_reg_ppiten_pp0_it5)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_91) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st8_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st8_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_91 assign process. ///
always @ (inStream_TVALID or exitcond_fu_135_p2)
begin
    ap_sig_bdd_91 = ((inStream_TVALID == ap_const_logic_0) & (exitcond_fu_135_p2 == ap_const_lv1_0));
end
assign doGain_CRTL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

/// doGain_ap_rst assign process. ///
always @ (ap_rst_n)
begin
    doGain_ap_rst = ~ap_rst_n;
end
assign exitcond_fu_135_p2 = (idx_reg_123 == ap_const_lv10_3E8? 1'b1: 1'b0);
assign grp_fu_175_p0 = inStream_TDATA;
assign grp_fu_175_p1 = gain;
assign idx_1_fu_141_p2 = (idx_reg_123 + ap_const_lv10_1);
assign outStream_TDATA = grp_fu_175_p2;
assign outStream_TDEST = ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4;
assign outStream_TID = ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4;
assign outStream_TKEEP = ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4;
assign outStream_TLAST = ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4;
assign outStream_TSTRB = ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4;
assign outStream_TUSER = ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4;


endmodule //doGain

