-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doGain is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of doGain is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doGain,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=1006,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st8_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_ready : STD_LOGIC;
    signal gain : STD_LOGIC_VECTOR (31 downto 0);
    signal doGain_CRTL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal idx_reg_123 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_91 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_186_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_outStream_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_186_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_186_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_186_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_1_fu_141_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_keep_V_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_205 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_last_V_reg_215 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_outStream_TREADY : STD_LOGIC := '0';
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal doGain_ap_rst : STD_LOGIC;
    signal grp_fu_175_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component doGain_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doGain_CRTL_BUS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        gain : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    doGain_CRTL_BUS_s_axi_U : component doGain_CRTL_BUS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => doGain_CRTL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        gain => gain);

    doGain_mul_32s_32s_32_6_U0 : component doGain_mul_32s_32s_32_6
    generic map (
        ID => 0,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => doGain_ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        ce => grp_fu_175_ce,
        dout => grp_fu_175_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_outStream_TREADY assign process. --
    ap_reg_ioackin_outStream_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
                elsif ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91)) and (ap_const_logic_1 = outStream_TREADY)))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_135_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (exitcond_fu_135_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_135_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- idx_reg_123 assign process. --
    idx_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_135_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
                idx_reg_123 <= idx_1_fu_141_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                idx_reg_123 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then
                ap_reg_ppstg_exitcond_reg_186_pp0_it1 <= exitcond_reg_186;
                ap_reg_ppstg_exitcond_reg_186_pp0_it2 <= ap_reg_ppstg_exitcond_reg_186_pp0_it1;
                ap_reg_ppstg_exitcond_reg_186_pp0_it3 <= ap_reg_ppstg_exitcond_reg_186_pp0_it2;
                ap_reg_ppstg_exitcond_reg_186_pp0_it4 <= ap_reg_ppstg_exitcond_reg_186_pp0_it3;
                ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1 <= tmp_dest_V_reg_225;
                ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2 <= ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1;
                ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3 <= ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2;
                ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4 <= ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3;
                ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1 <= tmp_id_V_reg_220;
                ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2 <= ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1;
                ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3 <= ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2;
                ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4 <= ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3;
                ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1 <= tmp_keep_V_reg_200;
                ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2 <= ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1;
                ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3 <= ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2;
                ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4 <= ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3;
                ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1 <= tmp_last_V_reg_215;
                ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2 <= ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1;
                ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3 <= ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2;
                ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4 <= ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3;
                ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1 <= tmp_strb_V_reg_205;
                ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2 <= ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1;
                ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3 <= ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2;
                ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4 <= ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3;
                ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1 <= tmp_user_V_reg_210;
                ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2 <= ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1;
                ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3 <= ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2;
                ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4 <= ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then
                exitcond_reg_186 <= exitcond_fu_135_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_135_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then
                tmp_dest_V_reg_225 <= inStream_TDEST;
                tmp_id_V_reg_220 <= inStream_TID;
                tmp_keep_V_reg_200 <= inStream_TKEEP;
                tmp_last_V_reg_215 <= inStream_TLAST;
                tmp_strb_V_reg_205 <= inStream_TSTRB;
                tmp_user_V_reg_210 <= inStream_TUSER;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_135_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_91, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, ap_reg_ppstg_exitcond_reg_186_pp0_it4, ap_sig_ioackin_outStream_TREADY, ap_reg_ppiten_pp0_it5)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st8_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st8_fsm_2 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st8_fsm_2 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(inStream_TVALID, exitcond_fu_135_p2)
    begin
                ap_sig_bdd_91 <= ((inStream_TVALID = ap_const_logic_0) and (exitcond_fu_135_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_ioackin_outStream_TREADY assign process. --
    ap_sig_ioackin_outStream_TREADY_assign_proc : process(outStream_TREADY, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)) then 
            ap_sig_ioackin_outStream_TREADY <= outStream_TREADY;
        else 
            ap_sig_ioackin_outStream_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    doGain_CRTL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- doGain_ap_rst assign process. --
    doGain_ap_rst_assign_proc : process(ap_rst_n)
    begin
                doGain_ap_rst <= not(ap_rst_n);
    end process;

    exitcond_fu_135_p2 <= "1" when (idx_reg_123 = ap_const_lv10_3E8) else "0";

    -- grp_fu_175_ce assign process. --
    grp_fu_175_ce_assign_proc : process(ap_CS_fsm, exitcond_fu_135_p2, exitcond_reg_186, ap_reg_ppiten_pp0_it0, ap_sig_bdd_91, ap_reg_ppstg_exitcond_reg_186_pp0_it4, ap_sig_ioackin_outStream_TREADY, ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_reg_186_pp0_it1, ap_reg_ppstg_exitcond_reg_186_pp0_it2, ap_reg_ppstg_exitcond_reg_186_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and ((exitcond_fu_135_p2 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) or (exitcond_reg_186 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it3)))) then 
            grp_fu_175_ce <= ap_const_logic_1;
        else 
            grp_fu_175_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_175_p0 <= inStream_TDATA;
    grp_fu_175_p1 <= gain;
    idx_1_fu_141_p2 <= std_logic_vector(unsigned(idx_reg_123) + unsigned(ap_const_lv10_1));

    -- inStream_TREADY assign process. --
    inStream_TREADY_assign_proc : process(ap_CS_fsm, exitcond_fu_135_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_91, ap_reg_ppstg_exitcond_reg_186_pp0_it4, ap_sig_ioackin_outStream_TREADY, ap_reg_ppiten_pp0_it5)
    begin
        if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_135_p2 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))))) then 
            inStream_TREADY <= ap_const_logic_1;
        else 
            inStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    outStream_TDATA <= grp_fu_175_p2;
    outStream_TDEST <= ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4;
    outStream_TID <= ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4;
    outStream_TKEEP <= ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4;
    outStream_TLAST <= ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4;
    outStream_TSTRB <= ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4;
    outStream_TUSER <= ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4;

    -- outStream_TVALID assign process. --
    outStream_TVALID_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_91, ap_reg_ppstg_exitcond_reg_186_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_91)) and (ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
