// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "doGain.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic doGain::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic doGain::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> doGain::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> doGain::ap_ST_pp0_stg0_fsm_1 = "1";
const sc_lv<2> doGain::ap_ST_st8_fsm_2 = "10";
const int doGain::C_DATA_WIDTH = "100000";
const sc_lv<1> doGain::ap_const_lv1_0 = "0";
const sc_lv<10> doGain::ap_const_lv10_0 = "0000000000";
const sc_lv<10> doGain::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> doGain::ap_const_lv10_1 = "1";

doGain::doGain(sc_module_name name) : sc_module(name), mVcdFile(0) {
    doGain_CRTL_BUS_s_axi_U = new doGain_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("doGain_CRTL_BUS_s_axi_U");
    doGain_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    doGain_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    doGain_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    doGain_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    doGain_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    doGain_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    doGain_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    doGain_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    doGain_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    doGain_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    doGain_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    doGain_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    doGain_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    doGain_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    doGain_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    doGain_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    doGain_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    doGain_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    doGain_CRTL_BUS_s_axi_U->ARESETN(ap_rst_n);
    doGain_CRTL_BUS_s_axi_U->ACLK_EN(doGain_CRTL_BUS_s_axi_U_ap_dummy_ce);
    doGain_CRTL_BUS_s_axi_U->ap_start(ap_start);
    doGain_CRTL_BUS_s_axi_U->interrupt(interrupt);
    doGain_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    doGain_CRTL_BUS_s_axi_U->ap_done(ap_done);
    doGain_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    doGain_CRTL_BUS_s_axi_U->gain(gain);
    doGain_mul_32s_32s_32_6_U0 = new doGain_mul_32s_32s_32_6<0,6,32,32,32>("doGain_mul_32s_32s_32_6_U0");
    doGain_mul_32s_32s_32_6_U0->clk(ap_clk);
    doGain_mul_32s_32s_32_6_U0->reset(doGain_ap_rst);
    doGain_mul_32s_32s_32_6_U0->din0(grp_fu_175_p0);
    doGain_mul_32s_32s_32_6_U0->din1(grp_fu_175_p1);
    doGain_mul_32s_32s_32_6_U0->ce(grp_fu_175_ce);
    doGain_mul_32s_32s_32_6_U0->dout(grp_fu_175_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_91);
    sensitive << ( inStream_TVALID );
    sensitive << ( exitcond_fu_135_p2 );

    SC_METHOD(thread_ap_sig_ioackin_outStream_TREADY);
    sensitive << ( outStream_TREADY );
    sensitive << ( ap_reg_ioackin_outStream_TREADY );

    SC_METHOD(thread_doGain_CRTL_BUS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_doGain_ap_rst);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_135_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( idx_reg_123 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );
    sensitive << ( ap_reg_ppiten_pp0_it5 );

    SC_METHOD(thread_grp_fu_175_ce);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_135_p2 );
    sensitive << ( exitcond_reg_186 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it2 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it3 );

    SC_METHOD(thread_grp_fu_175_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inStream_TDATA );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_grp_fu_175_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( gain );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_idx_1_fu_141_p2);
    sensitive << ( idx_reg_123 );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_135_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );
    sensitive << ( ap_reg_ppiten_pp0_it5 );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( grp_fu_175_p2 );

    SC_METHOD(thread_outStream_TDEST);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4 );

    SC_METHOD(thread_outStream_TID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4 );

    SC_METHOD(thread_outStream_TKEEP);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4 );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4 );

    SC_METHOD(thread_outStream_TSTRB);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4 );

    SC_METHOD(thread_outStream_TUSER);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4 );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ioackin_outStream_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_135_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_91 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_186_pp0_it4 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );
    sensitive << ( ap_reg_ppiten_pp0_it5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it3 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it4 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it5 = SC_LOGIC_0;
    ap_reg_ioackin_outStream_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "doGain_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TUSER, "(port)inStream_TUSER");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, inStream_TID, "(port)inStream_TID");
    sc_trace(mVcdFile, inStream_TDEST, "(port)inStream_TDEST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TUSER, "(port)outStream_TUSER");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, outStream_TID, "(port)outStream_TID");
    sc_trace(mVcdFile, outStream_TDEST, "(port)outStream_TDEST");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, gain, "gain");
    sc_trace(mVcdFile, doGain_CRTL_BUS_s_axi_U_ap_dummy_ce, "doGain_CRTL_BUS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, idx_reg_123, "idx_reg_123");
    sc_trace(mVcdFile, exitcond_fu_135_p2, "exitcond_fu_135_p2");
    sc_trace(mVcdFile, exitcond_reg_186, "exitcond_reg_186");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_sig_bdd_91, "ap_sig_bdd_91");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it3, "ap_reg_ppiten_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it4, "ap_reg_ppiten_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_186_pp0_it4, "ap_reg_ppstg_exitcond_reg_186_pp0_it4");
    sc_trace(mVcdFile, ap_sig_ioackin_outStream_TREADY, "ap_sig_ioackin_outStream_TREADY");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it5, "ap_reg_ppiten_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_186_pp0_it1, "ap_reg_ppstg_exitcond_reg_186_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_186_pp0_it2, "ap_reg_ppstg_exitcond_reg_186_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_186_pp0_it3, "ap_reg_ppstg_exitcond_reg_186_pp0_it3");
    sc_trace(mVcdFile, idx_1_fu_141_p2, "idx_1_fu_141_p2");
    sc_trace(mVcdFile, tmp_keep_V_reg_200, "tmp_keep_V_reg_200");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1, "ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2, "ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3, "ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4, "ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4");
    sc_trace(mVcdFile, tmp_strb_V_reg_205, "tmp_strb_V_reg_205");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1, "ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2, "ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3, "ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4, "ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4");
    sc_trace(mVcdFile, tmp_user_V_reg_210, "tmp_user_V_reg_210");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1, "ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2, "ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3, "ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4, "ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4");
    sc_trace(mVcdFile, tmp_last_V_reg_215, "tmp_last_V_reg_215");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1, "ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2, "ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3, "ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4, "ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4");
    sc_trace(mVcdFile, tmp_id_V_reg_220, "tmp_id_V_reg_220");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1, "ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2, "ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3, "ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4, "ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4");
    sc_trace(mVcdFile, tmp_dest_V_reg_225, "tmp_dest_V_reg_225");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1, "ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2, "ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3, "ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4, "ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4");
    sc_trace(mVcdFile, grp_fu_175_p2, "grp_fu_175_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_outStream_TREADY, "ap_reg_ioackin_outStream_TREADY");
    sc_trace(mVcdFile, grp_fu_175_p0, "grp_fu_175_p0");
    sc_trace(mVcdFile, grp_fu_175_p1, "grp_fu_175_p1");
    sc_trace(mVcdFile, doGain_ap_rst, "doGain_ap_rst");
    sc_trace(mVcdFile, grp_fu_175_ce, "grp_fu_175_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("doGain.hdltvin.dat");
    mHdltvoutHandle.open("doGain.hdltvout.dat");
}

doGain::~doGain() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete doGain_CRTL_BUS_s_axi_U;
    delete doGain_mul_32s_32s_32_6_U0;
}

void doGain::thread_ap_clk_no_reset_() {
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ioackin_outStream_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
              !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read())))))) {
            ap_reg_ioackin_outStream_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_91.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_TREADY.read())))) {
            ap_reg_ioackin_outStream_TREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))) && 
             !esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
                     !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))) && 
                     !esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
            ap_reg_ppiten_pp0_it3 = ap_reg_ppiten_pp0_it2.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ppiten_pp0_it4 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
            ap_reg_ppiten_pp0_it4 = ap_reg_ppiten_pp0_it3.read();
        }
    }
    if ( ap_rst_n.read() == ap_const_logic_0) {
        ap_reg_ppiten_pp0_it5 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
            ap_reg_ppiten_pp0_it5 = ap_reg_ppiten_pp0_it4.read();
        } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it5 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
        idx_reg_123 = idx_1_fu_141_p2.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        idx_reg_123 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
        ap_reg_ppstg_exitcond_reg_186_pp0_it1 = exitcond_reg_186.read();
        ap_reg_ppstg_exitcond_reg_186_pp0_it2 = ap_reg_ppstg_exitcond_reg_186_pp0_it1.read();
        ap_reg_ppstg_exitcond_reg_186_pp0_it3 = ap_reg_ppstg_exitcond_reg_186_pp0_it2.read();
        ap_reg_ppstg_exitcond_reg_186_pp0_it4 = ap_reg_ppstg_exitcond_reg_186_pp0_it3.read();
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1 = tmp_dest_V_reg_225.read();
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2 = ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it1.read();
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3 = ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it2.read();
        ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4 = ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it3.read();
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1 = tmp_id_V_reg_220.read();
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2 = ap_reg_ppstg_tmp_id_V_reg_220_pp0_it1.read();
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3 = ap_reg_ppstg_tmp_id_V_reg_220_pp0_it2.read();
        ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4 = ap_reg_ppstg_tmp_id_V_reg_220_pp0_it3.read();
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1 = tmp_keep_V_reg_200.read();
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2 = ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it1.read();
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3 = ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it2.read();
        ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4 = ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it3.read();
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1 = tmp_last_V_reg_215.read();
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2 = ap_reg_ppstg_tmp_last_V_reg_215_pp0_it1.read();
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3 = ap_reg_ppstg_tmp_last_V_reg_215_pp0_it2.read();
        ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4 = ap_reg_ppstg_tmp_last_V_reg_215_pp0_it3.read();
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1 = tmp_strb_V_reg_205.read();
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2 = ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it1.read();
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3 = ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it2.read();
        ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4 = ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it3.read();
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1 = tmp_user_V_reg_210.read();
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2 = ap_reg_ppstg_tmp_user_V_reg_210_pp0_it1.read();
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3 = ap_reg_ppstg_tmp_user_V_reg_210_pp0_it2.read();
        ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4 = ap_reg_ppstg_tmp_user_V_reg_210_pp0_it3.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
        exitcond_reg_186 = exitcond_fu_135_p2.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))))) {
        tmp_dest_V_reg_225 = inStream_TDEST.read();
        tmp_id_V_reg_220 = inStream_TID.read();
        tmp_keep_V_reg_200 = inStream_TKEEP.read();
        tmp_last_V_reg_215 = inStream_TLAST.read();
        tmp_strb_V_reg_205 = inStream_TSTRB.read();
        tmp_user_V_reg_210 = inStream_TUSER.read();
    }
}

void doGain::thread_ap_done() {
    if (esl_seteq<1,2,2>(ap_ST_st8_fsm_2, ap_CS_fsm.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void doGain::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void doGain::thread_ap_ready() {
    if (esl_seteq<1,2,2>(ap_ST_st8_fsm_2, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void doGain::thread_ap_sig_bdd_91() {
    ap_sig_bdd_91 = (esl_seteq<1,1,1>(inStream_TVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0));
}

void doGain::thread_ap_sig_ioackin_outStream_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_TREADY.read())) {
        ap_sig_ioackin_outStream_TREADY = outStream_TREADY.read();
    } else {
        ap_sig_ioackin_outStream_TREADY = ap_const_logic_1;
    }
}

void doGain::thread_doGain_CRTL_BUS_s_axi_U_ap_dummy_ce() {
    doGain_CRTL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void doGain::thread_doGain_ap_rst() {
    doGain_ap_rst =  (sc_logic) (~ap_rst_n.read());
}

void doGain::thread_exitcond_fu_135_p2() {
    exitcond_fu_135_p2 = (!idx_reg_123.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(idx_reg_123.read() == ap_const_lv10_3E8);
}

void doGain::thread_grp_fu_175_ce() {
    if ((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))) && 
         (esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) || 
          esl_seteq<1,1,1>(exitcond_reg_186.read(), ap_const_lv1_0) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it1.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it2.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it3.read())))) {
        grp_fu_175_ce = ap_const_logic_1;
    } else {
        grp_fu_175_ce = ap_const_logic_0;
    }
}

void doGain::thread_grp_fu_175_p0() {
    grp_fu_175_p0 = inStream_TDATA.read();
}

void doGain::thread_grp_fu_175_p1() {
    grp_fu_175_p1 = gain.read();
}

void doGain::thread_idx_1_fu_141_p2() {
    idx_1_fu_141_p2 = (!idx_reg_123.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_bigint<10>(idx_reg_123.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void doGain::thread_inStream_TREADY() {
    if (((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0) && 
          !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read())))))) {
        inStream_TREADY = ap_const_logic_1;
    } else {
        inStream_TREADY = ap_const_logic_0;
    }
}

void doGain::thread_outStream_TDATA() {
    outStream_TDATA = grp_fu_175_p2.read();
}

void doGain::thread_outStream_TDEST() {
    outStream_TDEST = ap_reg_ppstg_tmp_dest_V_reg_225_pp0_it4.read();
}

void doGain::thread_outStream_TID() {
    outStream_TID = ap_reg_ppstg_tmp_id_V_reg_220_pp0_it4.read();
}

void doGain::thread_outStream_TKEEP() {
    outStream_TKEEP = ap_reg_ppstg_tmp_keep_V_reg_200_pp0_it4.read();
}

void doGain::thread_outStream_TLAST() {
    outStream_TLAST = ap_reg_ppstg_tmp_last_V_reg_215_pp0_it4.read();
}

void doGain::thread_outStream_TSTRB() {
    outStream_TSTRB = ap_reg_ppstg_tmp_strb_V_reg_205_pp0_it4.read();
}

void doGain::thread_outStream_TUSER() {
    outStream_TUSER = ap_reg_ppstg_tmp_user_V_reg_210_pp0_it4.read();
}

void doGain::thread_outStream_TVALID() {
    if (((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_91.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_TREADY.read())))) {
        outStream_TVALID = ap_const_logic_1;
    } else {
        outStream_TVALID = ap_const_logic_0;
    }
}

void doGain::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if ((!(esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it4.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))) && !esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else if (((esl_seteq<1,2,2>(ap_ST_pp0_stg0_fsm_1, ap_CS_fsm.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it4.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  ap_sig_bdd_91.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_186_pp0_it4.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()))) && 
  !esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_st8_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void doGain::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TUSER\" :  \"" << inStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TID\" :  \"" << inStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDEST\" :  \"" << inStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TUSER\" :  \"" << outStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TID\" :  \"" << outStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDEST\" :  \"" << outStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

