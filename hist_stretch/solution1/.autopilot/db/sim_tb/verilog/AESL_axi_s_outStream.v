// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module AESL_axi_s_outStream (
    clk,
    reset,
    TRAN_outStream_TDATA,
    TRAN_outStream_TKEEP,
    TRAN_outStream_TSTRB,
    TRAN_outStream_TUSER,
    TRAN_outStream_TLAST,
    TRAN_outStream_TID,
    TRAN_outStream_TDEST,
    TRAN_outStream_TVALID,
    TRAN_outStream_TREADY,
    ready,
    done
    );

//------------------------Parameter----------------------
`define TV_IN_outStream_TDATA "./c.doHistStretch.autotvin_outStream_V_data_V.dat"
`define TV_OUT_outStream_TDATA "./impl_rtl.doHistStretch.autotvout_outStream_V_data_V.dat"
`define TV_IN_outStream_TKEEP "./c.doHistStretch.autotvin_outStream_V_keep_V.dat"
`define TV_OUT_outStream_TKEEP "./impl_rtl.doHistStretch.autotvout_outStream_V_keep_V.dat"
`define TV_IN_outStream_TSTRB "./c.doHistStretch.autotvin_outStream_V_strb_V.dat"
`define TV_OUT_outStream_TSTRB "./impl_rtl.doHistStretch.autotvout_outStream_V_strb_V.dat"
`define TV_IN_outStream_TUSER "./c.doHistStretch.autotvin_outStream_V_user_V.dat"
`define TV_OUT_outStream_TUSER "./impl_rtl.doHistStretch.autotvout_outStream_V_user_V.dat"
`define TV_IN_outStream_TLAST "./c.doHistStretch.autotvin_outStream_V_last_V.dat"
`define TV_OUT_outStream_TLAST "./impl_rtl.doHistStretch.autotvout_outStream_V_last_V.dat"
`define TV_IN_outStream_TID "./c.doHistStretch.autotvin_outStream_V_id_V.dat"
`define TV_OUT_outStream_TID "./impl_rtl.doHistStretch.autotvout_outStream_V_id_V.dat"
`define TV_IN_outStream_TDEST "./c.doHistStretch.autotvin_outStream_V_dest_V.dat"
`define TV_OUT_outStream_TDEST "./impl_rtl.doHistStretch.autotvout_outStream_V_dest_V.dat"
// Input and Output
input clk;
input reset;
input [7 : 0] TRAN_outStream_TDATA;
input  TRAN_outStream_TKEEP;
input  TRAN_outStream_TSTRB;
input [1 : 0] TRAN_outStream_TUSER;
input  TRAN_outStream_TLAST;
input [4 : 0] TRAN_outStream_TID;
input [5 : 0] TRAN_outStream_TDEST;
input  TRAN_outStream_TVALID;
output  TRAN_outStream_TREADY;
input ready;
input done;

//------------------------Local signal-------------------
reg [7 : 0] mem_outStream_TDATA [76799 : 0];
initial begin : initialize_mem_outStream_TDATA
  integer i;
  for (i = 0; i < 76800; i = i + 1) begin
      mem_outStream_TDATA[i] = 0;
  end
end
wire outStream_TDATA_empty_n;
wire outStream_TDATA_full_n;
reg [18 : 0]  outStream_TDATA_mInPtr  =   0;
reg [18 : 0]  outStream_TDATA_mOutPtr =   0;
reg  outStream_TDATA_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

reg [0 : 0] mem_outStream_TKEEP [76799 : 0];
initial begin : initialize_mem_outStream_TKEEP
  integer i;
  for (i = 0; i < 76800; i = i + 1) begin
      mem_outStream_TKEEP[i] = 0;
  end
end
wire outStream_TKEEP_empty_n;
wire outStream_TKEEP_full_n;
reg [18 : 0]  outStream_TKEEP_mInPtr  =   0;
reg [18 : 0]  outStream_TKEEP_mOutPtr =   0;
reg  outStream_TKEEP_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

reg [0 : 0] mem_outStream_TSTRB [76799 : 0];
initial begin : initialize_mem_outStream_TSTRB
  integer i;
  for (i = 0; i < 76800; i = i + 1) begin
      mem_outStream_TSTRB[i] = 0;
  end
end
wire outStream_TSTRB_empty_n;
wire outStream_TSTRB_full_n;
reg [18 : 0]  outStream_TSTRB_mInPtr  =   0;
reg [18 : 0]  outStream_TSTRB_mOutPtr =   0;
reg  outStream_TSTRB_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

reg [1 : 0] mem_outStream_TUSER [76799 : 0];
initial begin : initialize_mem_outStream_TUSER
  integer i;
  for (i = 0; i < 76800; i = i + 1) begin
      mem_outStream_TUSER[i] = 0;
  end
end
wire outStream_TUSER_empty_n;
wire outStream_TUSER_full_n;
reg [18 : 0]  outStream_TUSER_mInPtr  =   0;
reg [18 : 0]  outStream_TUSER_mOutPtr =   0;
reg  outStream_TUSER_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

reg [0 : 0] mem_outStream_TLAST [76799 : 0];
initial begin : initialize_mem_outStream_TLAST
  integer i;
  for (i = 0; i < 76800; i = i + 1) begin
      mem_outStream_TLAST[i] = 0;
  end
end
wire outStream_TLAST_empty_n;
wire outStream_TLAST_full_n;
reg [18 : 0]  outStream_TLAST_mInPtr  =   0;
reg [18 : 0]  outStream_TLAST_mOutPtr =   0;
reg  outStream_TLAST_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

reg [4 : 0] mem_outStream_TID [76799 : 0];
initial begin : initialize_mem_outStream_TID
  integer i;
  for (i = 0; i < 76800; i = i + 1) begin
      mem_outStream_TID[i] = 0;
  end
end
wire outStream_TID_empty_n;
wire outStream_TID_full_n;
reg [18 : 0]  outStream_TID_mInPtr  =   0;
reg [18 : 0]  outStream_TID_mOutPtr =   0;
reg  outStream_TID_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

reg [5 : 0] mem_outStream_TDEST [76799 : 0];
initial begin : initialize_mem_outStream_TDEST
  integer i;
  for (i = 0; i < 76800; i = i + 1) begin
      mem_outStream_TDEST[i] = 0;
  end
end
wire outStream_TDEST_empty_n;
wire outStream_TDEST_full_n;
reg [18 : 0]  outStream_TDEST_mInPtr  =   0;
reg [18 : 0]  outStream_TDEST_mOutPtr =   0;
reg  outStream_TDEST_mFlag_nEF_hint;  // 0: empty hint, 1: full hint

assign outStream_TDATA_empty_n	=	((outStream_TDATA_mInPtr == outStream_TDATA_mOutPtr) && outStream_TDATA_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign outStream_TDATA_full_n	=	((outStream_TDATA_mInPtr == outStream_TDATA_mOutPtr) && outStream_TDATA_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
assign outStream_TKEEP_empty_n	=	((outStream_TKEEP_mInPtr == outStream_TKEEP_mOutPtr) && outStream_TKEEP_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign outStream_TKEEP_full_n	=	((outStream_TKEEP_mInPtr == outStream_TKEEP_mOutPtr) && outStream_TKEEP_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
assign outStream_TSTRB_empty_n	=	((outStream_TSTRB_mInPtr == outStream_TSTRB_mOutPtr) && outStream_TSTRB_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign outStream_TSTRB_full_n	=	((outStream_TSTRB_mInPtr == outStream_TSTRB_mOutPtr) && outStream_TSTRB_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
assign outStream_TUSER_empty_n	=	((outStream_TUSER_mInPtr == outStream_TUSER_mOutPtr) && outStream_TUSER_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign outStream_TUSER_full_n	=	((outStream_TUSER_mInPtr == outStream_TUSER_mOutPtr) && outStream_TUSER_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
assign outStream_TLAST_empty_n	=	((outStream_TLAST_mInPtr == outStream_TLAST_mOutPtr) && outStream_TLAST_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign outStream_TLAST_full_n	=	((outStream_TLAST_mInPtr == outStream_TLAST_mOutPtr) && outStream_TLAST_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
assign outStream_TID_empty_n	=	((outStream_TID_mInPtr == outStream_TID_mOutPtr) && outStream_TID_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign outStream_TID_full_n	=	((outStream_TID_mInPtr == outStream_TID_mOutPtr) && outStream_TID_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
assign outStream_TDEST_empty_n	=	((outStream_TDEST_mInPtr == outStream_TDEST_mOutPtr) && outStream_TDEST_mFlag_nEF_hint == 1'b0)? 1'b 0: 1'b 1;
assign outStream_TDEST_full_n	=	((outStream_TDEST_mInPtr == outStream_TDEST_mOutPtr) && outStream_TDEST_mFlag_nEF_hint == 1'b1)? 1'b 0: 1'b 1;
// Inner signals
assign TRAN_outStream_TREADY = 1 & 
    outStream_TDATA_full_n &
    outStream_TKEEP_full_n &
    outStream_TSTRB_full_n &
    outStream_TUSER_full_n &
    outStream_TLAST_full_n &
    outStream_TID_full_n &
    outStream_TDEST_full_n &
      1;
//------------------------Task and function--------------
task read_token;
	input integer fp;
  output reg [199 : 0] token;
	reg [7:0] c;
	reg intoken;
	reg done;
	begin
	    token = "";
	    intoken = 0;
	    done = 0;
	    while (!done) begin
		c = $fgetc(fp);
		if (c == 8'hff) begin	// EOF
		    done = 1;
		end
		else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
		    if (intoken) begin
			done = 1;
		    end
		end
		else begin			// valid character
		    intoken = 1;
		    token = (token << 8) | c;
		end
	    end
	end
endtask

//------------------------Write-only axi_s-------------------

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    outStream_TDATA_mInPtr = 0;
  end
  else if(TRAN_outStream_TVALID && TRAN_outStream_TREADY) begin
	    if(outStream_TDATA_mInPtr < 76800) begin
          mem_outStream_TDATA[outStream_TDATA_mInPtr] = TRAN_outStream_TDATA;
	        outStream_TDATA_mInPtr <= outStream_TDATA_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_outStream_TDATA_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      outStream_TDATA_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal outStream_TDATA
initial begin : outStream_TDATA_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  outStream_TDATA_mOutPtr = 76800;
  outStream_TDATA_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_outStream_TDATA, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_outStream_TDATA);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < outStream_TDATA_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_outStream_TDATA[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    outStream_TKEEP_mInPtr = 0;
  end
  else if(TRAN_outStream_TVALID && TRAN_outStream_TREADY) begin
	    if(outStream_TKEEP_mInPtr < 76800) begin
          mem_outStream_TKEEP[outStream_TKEEP_mInPtr] = TRAN_outStream_TKEEP;
	        outStream_TKEEP_mInPtr <= outStream_TKEEP_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_outStream_TKEEP_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      outStream_TKEEP_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal outStream_TKEEP
initial begin : outStream_TKEEP_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  outStream_TKEEP_mOutPtr = 76800;
  outStream_TKEEP_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_outStream_TKEEP, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_outStream_TKEEP);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < outStream_TKEEP_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_outStream_TKEEP[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    outStream_TSTRB_mInPtr = 0;
  end
  else if(TRAN_outStream_TVALID && TRAN_outStream_TREADY) begin
	    if(outStream_TSTRB_mInPtr < 76800) begin
          mem_outStream_TSTRB[outStream_TSTRB_mInPtr] = TRAN_outStream_TSTRB;
	        outStream_TSTRB_mInPtr <= outStream_TSTRB_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_outStream_TSTRB_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      outStream_TSTRB_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal outStream_TSTRB
initial begin : outStream_TSTRB_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  outStream_TSTRB_mOutPtr = 76800;
  outStream_TSTRB_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_outStream_TSTRB, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_outStream_TSTRB);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < outStream_TSTRB_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_outStream_TSTRB[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    outStream_TUSER_mInPtr = 0;
  end
  else if(TRAN_outStream_TVALID && TRAN_outStream_TREADY) begin
	    if(outStream_TUSER_mInPtr < 76800) begin
          mem_outStream_TUSER[outStream_TUSER_mInPtr] = TRAN_outStream_TUSER;
	        outStream_TUSER_mInPtr <= outStream_TUSER_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_outStream_TUSER_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      outStream_TUSER_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal outStream_TUSER
initial begin : outStream_TUSER_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  outStream_TUSER_mOutPtr = 76800;
  outStream_TUSER_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_outStream_TUSER, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_outStream_TUSER);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < outStream_TUSER_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_outStream_TUSER[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    outStream_TLAST_mInPtr = 0;
  end
  else if(TRAN_outStream_TVALID && TRAN_outStream_TREADY) begin
	    if(outStream_TLAST_mInPtr < 76800) begin
          mem_outStream_TLAST[outStream_TLAST_mInPtr] = TRAN_outStream_TLAST;
	        outStream_TLAST_mInPtr <= outStream_TLAST_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_outStream_TLAST_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      outStream_TLAST_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal outStream_TLAST
initial begin : outStream_TLAST_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  outStream_TLAST_mOutPtr = 76800;
  outStream_TLAST_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_outStream_TLAST, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_outStream_TLAST);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < outStream_TLAST_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_outStream_TLAST[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    outStream_TID_mInPtr = 0;
  end
  else if(TRAN_outStream_TVALID && TRAN_outStream_TREADY) begin
	    if(outStream_TID_mInPtr < 76800) begin
          mem_outStream_TID[outStream_TID_mInPtr] = TRAN_outStream_TID;
	        outStream_TID_mInPtr <= outStream_TID_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_outStream_TID_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      outStream_TID_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal outStream_TID
initial begin : outStream_TID_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  outStream_TID_mOutPtr = 76800;
  outStream_TID_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_outStream_TID, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_outStream_TID);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < outStream_TID_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_outStream_TID[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    outStream_TDEST_mInPtr = 0;
  end
  else if(TRAN_outStream_TVALID && TRAN_outStream_TREADY) begin
	    if(outStream_TDEST_mInPtr < 76800) begin
          mem_outStream_TDEST[outStream_TDEST_mInPtr] = TRAN_outStream_TDEST;
	        outStream_TDEST_mInPtr <= outStream_TDEST_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_outStream_TDEST_mInPtr_process
  while(1) begin
      @(posedge clk);
      # 0.2;
      while(done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      outStream_TDEST_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal outStream_TDEST
initial begin : outStream_TDEST_write_file_process
  integer fp;
  integer transaction_idx;
  reg [ 8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  outStream_TDEST_mOutPtr = 76800;
  outStream_TDEST_mFlag_nEF_hint = 1;
  while(1) begin
      @(posedge clk);
      # 0.1;
      while(done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_outStream_TDEST, "a");
	    if(fp == 0) begin       // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_outStream_TDEST);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < outStream_TDEST_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp,"0x%x",mem_outStream_TDEST[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

endmodule
