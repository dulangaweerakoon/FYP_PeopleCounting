// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      doHist
`define AUTOTB_DUT_INST AESL_inst_doHist
`define AUTOTB_TOP      apatb_doHist_top
`define AUTOTB_LAT_RESULT_FILE "doHist.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "doHist.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_doHist_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD 10.000000
`define LENGTH_inStream_V_data_V 76800
`define LENGTH_inStream_V_keep_V 76800
`define LENGTH_inStream_V_strb_V 76800
`define LENGTH_inStream_V_user_V 76800
`define LENGTH_inStream_V_last_V 76800
`define LENGTH_inStream_V_id_V 76800
`define LENGTH_inStream_V_dest_V 76800
`define LENGTH_histo 256

`define   AESL_DEPTH_inStream_V_data_V 1
`define   AESL_DEPTH_inStream_V_keep_V 1
`define   AESL_DEPTH_inStream_V_strb_V 1
`define   AESL_DEPTH_inStream_V_user_V 1
`define   AESL_DEPTH_inStream_V_last_V 1
`define   AESL_DEPTH_inStream_V_id_V 1
`define   AESL_DEPTH_inStream_V_dest_V 1
`define	AESL_BRAM_histo AESL_autobram_histo
`define	AESL_BRAM_INST_histo bram_inst_histo
`define AUTOTB_TVIN_inStream_V_data_V  "./c.doHist.autotvin_inStream_V_data_V.dat"
`define AUTOTB_TVIN_inStream_V_keep_V  "./c.doHist.autotvin_inStream_V_keep_V.dat"
`define AUTOTB_TVIN_inStream_V_strb_V  "./c.doHist.autotvin_inStream_V_strb_V.dat"
`define AUTOTB_TVIN_inStream_V_user_V  "./c.doHist.autotvin_inStream_V_user_V.dat"
`define AUTOTB_TVIN_inStream_V_last_V  "./c.doHist.autotvin_inStream_V_last_V.dat"
`define AUTOTB_TVIN_inStream_V_id_V  "./c.doHist.autotvin_inStream_V_id_V.dat"
`define AUTOTB_TVIN_inStream_V_dest_V  "./c.doHist.autotvin_inStream_V_dest_V.dat"
`define AUTOTB_TVIN_histo  "./c.doHist.autotvin_histo.dat"
`define AUTOTB_TVIN_inStream_V_data_V_out_wrapc  "./rtl.doHist.autotvin_inStream_V_data_V.dat"
`define AUTOTB_TVIN_inStream_V_keep_V_out_wrapc  "./rtl.doHist.autotvin_inStream_V_keep_V.dat"
`define AUTOTB_TVIN_inStream_V_strb_V_out_wrapc  "./rtl.doHist.autotvin_inStream_V_strb_V.dat"
`define AUTOTB_TVIN_inStream_V_user_V_out_wrapc  "./rtl.doHist.autotvin_inStream_V_user_V.dat"
`define AUTOTB_TVIN_inStream_V_last_V_out_wrapc  "./rtl.doHist.autotvin_inStream_V_last_V.dat"
`define AUTOTB_TVIN_inStream_V_id_V_out_wrapc  "./rtl.doHist.autotvin_inStream_V_id_V.dat"
`define AUTOTB_TVIN_inStream_V_dest_V_out_wrapc  "./rtl.doHist.autotvin_inStream_V_dest_V.dat"
`define AUTOTB_TVIN_histo_out_wrapc  "./rtl.doHist.autotvin_histo.dat"
`define AUTOTB_TVOUT_histo  "./c.doHist.autotvout_histo.dat"
`define AUTOTB_TVOUT_histo_out_wrapc  "./impl_rtl.doHist.autotvout_histo.dat"

module `AUTOTB_TOP;
task read_token;
    input integer fp;
    output reg [199 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [199 : 0] token1;
    reg [199 : 0] token2;
    reg [199 : 0] golden;
    reg [199 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin // Illegal format
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
	          read_token(fp1, token1);
	          read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                ret = $sscanf(token2, "0x%x", result);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                if(golden != result) begin
	                  $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
                end
	              read_token(fp1, token1);
	              read_token(fp2, token2);
            end
	          read_token(fp1, token1);
	          read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
wire  s_axi_CRTL_BUS_AWVALID;
wire  s_axi_CRTL_BUS_AWREADY;
wire [4 : 0] s_axi_CRTL_BUS_AWADDR;
wire  s_axi_CRTL_BUS_WVALID;
wire  s_axi_CRTL_BUS_WREADY;
wire [31 : 0] s_axi_CRTL_BUS_WDATA;
wire [3 : 0] s_axi_CRTL_BUS_WSTRB;
wire  s_axi_CRTL_BUS_ARVALID;
wire  s_axi_CRTL_BUS_ARREADY;
wire [4 : 0] s_axi_CRTL_BUS_ARADDR;
wire  s_axi_CRTL_BUS_RVALID;
wire  s_axi_CRTL_BUS_RREADY;
wire [31 : 0] s_axi_CRTL_BUS_RDATA;
wire [1 : 0] s_axi_CRTL_BUS_RRESP;
wire  s_axi_CRTL_BUS_BVALID;
wire  s_axi_CRTL_BUS_BREADY;
wire [1 : 0] s_axi_CRTL_BUS_BRESP;
wire ap_clk;
wire ap_rst_n;
wire [7 : 0] inStream_TDATA;
wire  inStream_TVALID;
wire  inStream_TREADY;
wire [0 : 0] inStream_TKEEP;
wire [0 : 0] inStream_TSTRB;
wire [1 : 0] inStream_TUSER;
wire [0 : 0] inStream_TLAST;
wire [4 : 0] inStream_TID;
wire [5 : 0] inStream_TDEST;
wire [31 : 0] histo_Addr_A;
wire  histo_EN_A;
wire [3 : 0] histo_WEN_A;
wire [31 : 0] histo_Din_A;
wire [31 : 0] histo_Dout_A;
wire  histo_Clk_A;
wire  histo_Rst_A;
wire  interrupt;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire AESL_slave_start;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
.s_axi_CRTL_BUS_AWVALID(s_axi_CRTL_BUS_AWVALID),
.s_axi_CRTL_BUS_AWREADY(s_axi_CRTL_BUS_AWREADY),
.s_axi_CRTL_BUS_AWADDR(s_axi_CRTL_BUS_AWADDR),
.s_axi_CRTL_BUS_WVALID(s_axi_CRTL_BUS_WVALID),
.s_axi_CRTL_BUS_WREADY(s_axi_CRTL_BUS_WREADY),
.s_axi_CRTL_BUS_WDATA(s_axi_CRTL_BUS_WDATA),
.s_axi_CRTL_BUS_WSTRB(s_axi_CRTL_BUS_WSTRB),
.s_axi_CRTL_BUS_ARVALID(s_axi_CRTL_BUS_ARVALID),
.s_axi_CRTL_BUS_ARREADY(s_axi_CRTL_BUS_ARREADY),
.s_axi_CRTL_BUS_ARADDR(s_axi_CRTL_BUS_ARADDR),
.s_axi_CRTL_BUS_RVALID(s_axi_CRTL_BUS_RVALID),
.s_axi_CRTL_BUS_RREADY(s_axi_CRTL_BUS_RREADY),
.s_axi_CRTL_BUS_RDATA(s_axi_CRTL_BUS_RDATA),
.s_axi_CRTL_BUS_RRESP(s_axi_CRTL_BUS_RRESP),
.s_axi_CRTL_BUS_BVALID(s_axi_CRTL_BUS_BVALID),
.s_axi_CRTL_BUS_BREADY(s_axi_CRTL_BUS_BREADY),
.s_axi_CRTL_BUS_BRESP(s_axi_CRTL_BUS_BRESP),
.ap_clk(ap_clk),
.ap_rst_n(ap_rst_n),
.inStream_TDATA(inStream_TDATA),
.inStream_TVALID(inStream_TVALID),
.inStream_TREADY(inStream_TREADY),
.inStream_TKEEP(inStream_TKEEP),
.inStream_TSTRB(inStream_TSTRB),
.inStream_TUSER(inStream_TUSER),
.inStream_TLAST(inStream_TLAST),
.inStream_TID(inStream_TID),
.inStream_TDEST(inStream_TDEST),
.histo_Addr_A(histo_Addr_A),
.histo_EN_A(histo_EN_A),
.histo_WEN_A(histo_WEN_A),
.histo_Din_A(histo_Din_A),
.histo_Dout_A(histo_Dout_A),
.histo_Clk_A(histo_Clk_A),
.histo_Rst_A(histo_Rst_A),
.interrupt(interrupt)
);

// Assignment for control signal
  assign ap_clk = AESL_clock;
  assign ap_rst_n = AESL_reset;
  assign ap_rst_n_n = ~AESL_reset;
  assign AESL_reset = rst;
  assign AESL_start = start;
  assign AESL_ce = ce;
  assign AESL_continue = continue;
  assign AESL_slave_write_start_in = slave_start_status ;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_done = slave_done_status ;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_output_done == 1 ) begin
        slave_done_status <= 1;
    end
end







//------------------------bramhisto Instantiation--------------

// The input and output of bramhisto
wire  bramhisto_Clk_A, bramhisto_Clk_B;
wire  bramhisto_EN_A, bramhisto_EN_B;
wire  [4 - 1 : 0] bramhisto_WEN_A, bramhisto_WEN_B;
wire    [31 : 0]	bramhisto_Addr_A, bramhisto_Addr_B;
wire	[31 : 0]	bramhisto_Din_A, bramhisto_Din_B;
wire    [31 : 0]	bramhisto_Dout_A, bramhisto_Dout_B;
wire	bramhisto_ready;
wire	bramhisto_done;

`AESL_BRAM_histo `AESL_BRAM_INST_histo(
    .Clk_A    (bramhisto_Clk_A),
    .Rst_A    (bramhisto_Rst_A),
    .EN_A     (bramhisto_EN_A),
    .WEN_A    (bramhisto_WEN_A),
    .Addr_A   (bramhisto_Addr_A),
    .Din_A    (bramhisto_Din_A),
    .Dout_A   (bramhisto_Dout_A),
    .Clk_B    (bramhisto_Clk_B),
    .Rst_B    (bramhisto_Rst_B),
    .EN_B     (bramhisto_EN_B),
    .WEN_B    (bramhisto_WEN_B),
    .Addr_B   (bramhisto_Addr_B),
    .Din_B    (bramhisto_Din_B),
    .Dout_B   (bramhisto_Dout_B),
    .ready	(bramhisto_ready),
    .done	    (bramhisto_done)
);

// Assignment between dut and bramhisto
assign bramhisto_Clk_A = histo_Clk_A;
assign bramhisto_Rst_A = histo_Rst_A;
assign bramhisto_Addr_A = histo_Addr_A;
assign bramhisto_EN_A = histo_EN_A;
assign histo_Dout_A = bramhisto_Dout_A;
assign bramhisto_WEN_A = histo_WEN_A;
assign bramhisto_Din_A = histo_Din_A;
assign bramhisto_WEN_B = 0;
assign bramhisto_Din_B = 0;
assign bramhisto_ready= ready;
assign bramhisto_done = interface_done;


wire inStream_ready;
wire inStream_done;
wire axi_s_inStream_TVALID;
wire axi_s_inStream_TREADY;
  AESL_axi_s_inStream AESL_AXI_S_inStream(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_inStream_TDATA (inStream_TDATA),
    .TRAN_inStream_TKEEP (inStream_TKEEP),
    .TRAN_inStream_TSTRB (inStream_TSTRB),
    .TRAN_inStream_TUSER (inStream_TUSER),
    .TRAN_inStream_TLAST (inStream_TLAST),
    .TRAN_inStream_TID (inStream_TID),
    .TRAN_inStream_TDEST (inStream_TDEST),
    .TRAN_inStream_TVALID (axi_s_inStream_TVALID),
    .TRAN_inStream_TREADY (axi_s_inStream_TREADY),
    .ready (inStream_ready),
    .done  (inStream_done)
);
assign    inStream_ready   =   ready;
assign    inStream_done    =   0;

reg   reg_inStream_TVALID;
initial begin : gen_reg_inStream_TVALID_process
    integer rand;
    reg_inStream_TVALID = 0;
    while(1)
    begin
        @(axi_s_inStream_TVALID);
        if(axi_s_inStream_TVALID === 1)
        begin
        end
        reg_inStream_TVALID = axi_s_inStream_TVALID;
    end
end

assign      inStream_TVALID    =   reg_inStream_TVALID;

assign      axi_s_inStream_TREADY    =   inStream_TREADY;


AESL_axi_slave_CRTL_BUS AESL_AXI_SLAVE_CRTL_BUS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_CRTL_BUS_AWADDR (s_axi_CRTL_BUS_AWADDR),
    .TRAN_s_axi_CRTL_BUS_AWVALID (s_axi_CRTL_BUS_AWVALID),
    .TRAN_s_axi_CRTL_BUS_AWREADY (s_axi_CRTL_BUS_AWREADY),
    .TRAN_s_axi_CRTL_BUS_WVALID (s_axi_CRTL_BUS_WVALID),
    .TRAN_s_axi_CRTL_BUS_WREADY (s_axi_CRTL_BUS_WREADY),
    .TRAN_s_axi_CRTL_BUS_WDATA (s_axi_CRTL_BUS_WDATA),
    .TRAN_s_axi_CRTL_BUS_WSTRB (s_axi_CRTL_BUS_WSTRB),
    .TRAN_s_axi_CRTL_BUS_ARADDR (s_axi_CRTL_BUS_ARADDR),
    .TRAN_s_axi_CRTL_BUS_ARVALID (s_axi_CRTL_BUS_ARVALID),
    .TRAN_s_axi_CRTL_BUS_ARREADY (s_axi_CRTL_BUS_ARREADY),
    .TRAN_s_axi_CRTL_BUS_RVALID (s_axi_CRTL_BUS_RVALID),
    .TRAN_s_axi_CRTL_BUS_RREADY (s_axi_CRTL_BUS_RREADY),
    .TRAN_s_axi_CRTL_BUS_RDATA (s_axi_CRTL_BUS_RDATA),
    .TRAN_s_axi_CRTL_BUS_RRESP (s_axi_CRTL_BUS_RRESP),
    .TRAN_s_axi_CRTL_BUS_BVALID (s_axi_CRTL_BUS_BVALID),
    .TRAN_s_axi_CRTL_BUS_BREADY (s_axi_CRTL_BUS_BREADY),
    .TRAN_s_axi_CRTL_BUS_BRESP (s_axi_CRTL_BUS_BRESP),
    .TRAN_CRTL_BUS_ready_out (AESL_ready),
    .TRAN_CRTL_BUS_ready_in (AESL_slave_ready),
    .TRAN_CRTL_BUS_done_out (AESL_slave_output_done),
    .TRAN_CRTL_BUS_idle_out (AESL_idle),
    .TRAN_CRTL_BUS_write_start_in     (AESL_slave_write_start_in),
    .TRAN_CRTL_BUS_write_start_finish (AESL_slave_write_start_finish),
    .TRAN_CRTL_BUS_transaction_done_in (AESL_done_delay),
    .TRAN_CRTL_BUS_interrupt  (interrupt),
    .TRAN_CRTL_BUS_start_in  (AESL_slave_start)
);

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_ready_cnt_proc
    ready_cnt = 0;
    wait(AESL_reset === 1);
    while(ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        ready_cnt = ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_done_cnt_proc
    integer fp1;
    integer fp2;
    done_cnt = 0;
    wait(AESL_reset === 1);
    while(done_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_done !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        done_cnt = done_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
    @(posedge AESL_clock);
    # 0.4;
        $display("Simulation Passed.");
    $finish;
end

initial fork
    AESL_clock = 0;
    forever #(`AUTOTB_CLOCK_PERIOD/2) AESL_clock = ~AESL_clock;
join

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
  integer rand;
  start = 0;
  ce = 1;
    wait(AESL_reset === 1);
  @(posedge AESL_clock);
  start <= 1;
  while(ready_cnt != `AUTOTB_TRANSACTION_NUM + 1) begin
      @(posedge AESL_clock);
      if(AESL_ready == 1) begin
          start <= 0;
          start <= 1;
      end
  end
  start <= 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt != `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_histo_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_histo_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_histo_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_histo_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_histo_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end    
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterOut_addr = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
    end
    else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
        AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterIn_addr = 0;
    end
    else begin
        if (AESL_start && AESL_mLatCnterIn_addr == 0) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
        if (AESL_ready && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1 ) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
    end
end

initial begin : performance_check
    integer transaction_counter;
    integer i;
    integer fp;

    integer latthistime;
    integer lattotal;
    integer latmax;
    integer latmin;


    integer thrthistime;
    integer thrtotal;
    integer thrmax;
    integer thrmin;

    integer lataver;
    integer thraver;
    reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
    reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];

    i = 0;
    lattotal = 0;
    latmax = 0;
    latmin = 32'h 7fffffff;
    lataver = 0;

    thrtotal = 0;
    thrmax = 0;
    thrmin = 32'h 7fffffff;
    thraver = 0;

    
    @(negedge AESL_clock); 
    @(posedge AESL_reset); 
    while (done_cnt != `AUTOTB_TRANSACTION_NUM) begin
            @(posedge AESL_clock);
    end
    #0.001

    if (AESL_mLatCnterIn_addr == 1 || AESL_mLatCnterIn_addr == 0 ) begin
        latmax  = 0;
        latmin  = 0;
        lataver = 0;
        thrmax  = 0;
        thrmin  = 0;
        thraver = 0;
        lat_array[0] = 0;
        thr_array[0] = 0;
    end
    else if (AESL_mLatCnterOut_addr == 1 || AESL_mLatCnterOut_addr == 0 ) begin
        latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
        latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
        lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
        thrmax  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
        thrmin  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
        thraver = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
        lat_array[0] = lataver;
        thr_array[0] = thraver;
    end
    else begin
//LATENCY
    for (i = 0;i < AESL_mLatCnterOut_addr ; i = i + 1) begin
        latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i] ;
        if ( i > 0 ) begin
            latthistime = (latthistime - 1 < 0) ? 0 : (latthistime - 1);
        end
        lattotal = lattotal + latthistime;
        lat_array[i] = latthistime;
        if (latthistime > latmax) latmax = latthistime;
        if (latthistime < latmin) latmin = latthistime;
    end
//II
    for (i = 0;i < AESL_mLatCnterIn_addr - 1; i = i + 1) begin
        thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
        if ( i == 0 ) begin
            thrthistime = thrthistime + 1;
        end
        thrtotal = thrtotal + thrthistime;
        thr_array[i] = thrthistime;
        if (thrthistime > thrmax) thrmax = thrthistime;
        if (thrthistime < thrmin) thrmin = thrthistime;
    end    
    
    thr_array[AESL_mLatCnterIn_addr - 1] = 0;
    lataver = lattotal / ( AESL_mLatCnterOut_addr);
    thraver = thrtotal / ( AESL_mLatCnterIn_addr - 1 );
    end

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");
    
	$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax );
	$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin );
	$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver );
	$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax );
	$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin );
	$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver );
	$fclose(fp);
	  fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
    $fdisplay (fp,"%20s%16s%16s","","latency","interval");
    for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
        $fdisplay (fp,"transaction%8d:%16d%16d",i , lat_array[i], thr_array[i]);
    end

	$fclose(fp);
end
endmodule
