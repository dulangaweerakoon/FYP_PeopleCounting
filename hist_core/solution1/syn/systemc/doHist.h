// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _doHist_HH_
#define _doHist_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "doHist_CRTL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CRTL_BUS_DATA_WIDTH = 32>
struct doHist : public sc_module {
    // Port declarations 36
    sc_in< sc_logic > s_axi_CRTL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CRTL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH/8> > s_axi_CRTL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CRTL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CRTL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CRTL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<8> > inStream_TDATA;
    sc_in< sc_logic > inStream_TVALID;
    sc_out< sc_logic > inStream_TREADY;
    sc_in< sc_lv<1> > inStream_TKEEP;
    sc_in< sc_lv<1> > inStream_TSTRB;
    sc_in< sc_lv<2> > inStream_TUSER;
    sc_in< sc_lv<1> > inStream_TLAST;
    sc_in< sc_lv<5> > inStream_TID;
    sc_in< sc_lv<6> > inStream_TDEST;
    sc_out< sc_lv<32> > histo_Addr_A;
    sc_out< sc_logic > histo_EN_A;
    sc_out< sc_lv<4> > histo_WEN_A;
    sc_out< sc_lv<32> > histo_Din_A;
    sc_in< sc_lv<32> > histo_Dout_A;
    sc_out< sc_logic > histo_Clk_A;
    sc_out< sc_logic > histo_Rst_A;
    sc_out< sc_logic > interrupt;


    // Module declarations
    doHist(sc_module_name name);
    SC_HAS_PROCESS(doHist);

    ~doHist();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    doHist_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>* doHist_CRTL_BUS_s_axi_U;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > doHist_CRTL_BUS_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<9> > idxHist_1_fu_136_p2;
    sc_signal< sc_lv<17> > idxPixel_1_fu_153_p2;
    sc_signal< sc_lv<17> > idxPixel_1_reg_186;
    sc_signal< sc_lv<1> > exitcond_fu_147_p2;
    sc_signal< bool > ap_sig_bdd_86;
    sc_signal< sc_lv<8> > histo_addr_1_reg_191;
    sc_signal< sc_lv<9> > idxHist_reg_107;
    sc_signal< sc_lv<1> > exitcond2_fu_130_p2;
    sc_signal< sc_lv<17> > idxPixel_reg_118;
    sc_signal< sc_lv<64> > tmp_fu_142_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_163_p1;
    sc_signal< sc_lv<32> > histo_Addr_A_orig;
    sc_signal< sc_lv<32> > tmp_4_fu_168_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_st3_fsm_2;
    static const sc_lv<2> ap_ST_st4_fsm_3;
    static const int C_DATA_WIDTH;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<17> ap_const_lv17_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<17> ap_const_lv17_12C00;
    static const sc_lv<17> ap_const_lv17_1;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_86();
    void thread_doHist_CRTL_BUS_s_axi_U_ap_dummy_ce();
    void thread_exitcond2_fu_130_p2();
    void thread_exitcond_fu_147_p2();
    void thread_histo_Addr_A();
    void thread_histo_Addr_A_orig();
    void thread_histo_Clk_A();
    void thread_histo_Din_A();
    void thread_histo_EN_A();
    void thread_histo_Rst_A();
    void thread_histo_WEN_A();
    void thread_idxHist_1_fu_136_p2();
    void thread_idxPixel_1_fu_153_p2();
    void thread_inStream_TREADY();
    void thread_tmp_3_fu_163_p1();
    void thread_tmp_4_fu_168_p2();
    void thread_tmp_fu_142_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
