-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doHist is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    histo_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    histo_EN_A : OUT STD_LOGIC;
    histo_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    histo_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    histo_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    histo_Clk_A : OUT STD_LOGIC;
    histo_Rst_A : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of doHist is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doHist,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.220000,HLS_SYN_LAT=153858,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_12C00 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_ready : STD_LOGIC;
    signal doHist_CRTL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal idxHist_1_fu_136_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal idxPixel_1_fu_153_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal idxPixel_1_reg_186 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_86 : BOOLEAN;
    signal histo_addr_1_reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxHist_reg_107 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxPixel_reg_118 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal histo_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component doHist_CRTL_BUS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    doHist_CRTL_BUS_s_axi_U : component doHist_CRTL_BUS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => doHist_CRTL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- idxHist_reg_107 assign process. --
    idxHist_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_130_p2))) then 
                idxHist_reg_107 <= idxHist_1_fu_136_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                idxHist_reg_107 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- idxPixel_reg_118 assign process. --
    idxPixel_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_fu_130_p2)))) then 
                idxPixel_reg_118 <= ap_const_lv17_0;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                idxPixel_reg_118 <= idxPixel_1_reg_186;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond_fu_147_p2 = ap_const_lv1_0) and not(ap_sig_bdd_86))) then
                histo_addr_1_reg_191 <= tmp_3_fu_163_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_86))) then
                idxPixel_1_reg_186 <= idxPixel_1_fu_153_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_147_p2, ap_sig_bdd_86, exitcond2_fu_130_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond2_fu_130_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((not(ap_sig_bdd_86) and not((exitcond_fu_147_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_147_p2 = ap_const_lv1_0) and not(ap_sig_bdd_86))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond_fu_147_p2, ap_sig_bdd_86)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_86) and not((exitcond_fu_147_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_147_p2, ap_sig_bdd_86)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_86) and not((exitcond_fu_147_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(inStream_TVALID, exitcond_fu_147_p2)
    begin
                ap_sig_bdd_86 <= ((inStream_TVALID = ap_const_logic_0) and (exitcond_fu_147_p2 = ap_const_lv1_0));
    end process;

    doHist_CRTL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond2_fu_130_p2 <= "1" when (idxHist_reg_107 = ap_const_lv9_100) else "0";
    exitcond_fu_147_p2 <= "1" when (idxPixel_reg_118 = ap_const_lv17_12C00) else "0";
    histo_Addr_A <= std_logic_vector(shift_left(unsigned(histo_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    -- histo_Addr_A_orig assign process. --
    histo_Addr_A_orig_assign_proc : process(ap_CS_fsm, histo_addr_1_reg_191, tmp_fu_142_p1, tmp_3_fu_163_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            histo_Addr_A_orig <= std_logic_vector(resize(unsigned(histo_addr_1_reg_191),32));
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            histo_Addr_A_orig <= tmp_fu_142_p1(32 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            histo_Addr_A_orig <= tmp_3_fu_163_p1(32 - 1 downto 0);
        else 
            histo_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    histo_Clk_A <= ap_clk;

    -- histo_Din_A assign process. --
    histo_Din_A_assign_proc : process(ap_CS_fsm, tmp_4_fu_168_p2)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            histo_Din_A <= tmp_4_fu_168_p2;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            histo_Din_A <= ap_const_lv32_0;
        else 
            histo_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- histo_EN_A assign process. --
    histo_EN_A_assign_proc : process(ap_CS_fsm, ap_sig_bdd_86)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_86)) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            histo_EN_A <= ap_const_logic_1;
        else 
            histo_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    histo_Rst_A <= ap_rst_n;

    -- histo_WEN_A assign process. --
    histo_WEN_A_assign_proc : process(ap_CS_fsm, exitcond2_fu_130_p2)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_130_p2)) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            histo_WEN_A <= ap_const_lv4_F;
        else 
            histo_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    idxHist_1_fu_136_p2 <= std_logic_vector(unsigned(idxHist_reg_107) + unsigned(ap_const_lv9_1));
    idxPixel_1_fu_153_p2 <= std_logic_vector(unsigned(idxPixel_reg_118) + unsigned(ap_const_lv17_1));

    -- inStream_TREADY assign process. --
    inStream_TREADY_assign_proc : process(ap_CS_fsm, exitcond_fu_147_p2, ap_sig_bdd_86)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond_fu_147_p2 = ap_const_lv1_0) and not(ap_sig_bdd_86)))) then 
            inStream_TREADY <= ap_const_logic_1;
        else 
            inStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_163_p1 <= std_logic_vector(resize(unsigned(inStream_TDATA),64));
    tmp_4_fu_168_p2 <= std_logic_vector(unsigned(histo_Dout_A) + unsigned(ap_const_lv32_1));
    tmp_fu_142_p1 <= std_logic_vector(resize(unsigned(idxHist_reg_107),64));
end behav;
